{"id":"node_modules/web3-eth-abi/lib/esm/coders/encode.js","dependencies":[{"name":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\coders\\encode.js.map","includedInParent":true,"mtime":1729344035622},{"name":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\src\\coders\\encode.ts","includedInParent":true,"mtime":1729344039695},{"name":"G:\\Twitter Dapp\\package.json","includedInParent":true,"mtime":1729344052353},{"name":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\package.json","includedInParent":true,"mtime":1729344035210},{"name":"web3-errors","loc":{"line":17,"column":25,"index":680},"parent":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\coders\\encode.js","resolved":"G:\\Twitter Dapp\\node_modules\\web3-errors\\lib\\esm\\index.js"},{"name":"web3-utils","loc":{"line":18,"column":22,"index":717},"parent":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\coders\\encode.js","resolved":"G:\\Twitter Dapp\\node_modules\\web3-utils\\lib\\esm\\index.js"},{"name":"web3-validator","loc":{"line":19,"column":22,"index":753},"parent":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\coders\\encode.js","resolved":"G:\\Twitter Dapp\\node_modules\\web3-validator\\lib\\esm\\index.js"},{"name":"./base/index.js","loc":{"line":20,"column":28,"index":799},"parent":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\coders\\encode.js","resolved":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\coders\\base\\index.js"},{"name":"./utils.js","loc":{"line":21,"column":28,"index":846},"parent":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\coders\\encode.js","resolved":"G:\\Twitter Dapp\\node_modules\\web3-eth-abi\\lib\\esm\\coders\\utils.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.encodeParameters = encodeParameters;\nexports.inferTypesAndEncodeParameters = inferTypesAndEncodeParameters;\nvar _web3Errors = require(\"web3-errors\");\nvar _web3Utils = require(\"web3-utils\");\nvar _web3Validator = require(\"web3-validator\");\nvar _index = require(\"./base/index.js\");\nvar _utils = require(\"./utils.js\");\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\n/**\n * @param params - The params to infer the ABI from\n * @returns The inferred ABI\n * @example\n * ```\n * inferParamsAbi([1, -1, 'hello', '0x1234', ])\n * ```\n * > [{ type: 'int256' }, { type: 'uint256' }, { type: 'string' }, { type: 'bytes' }]\n * ```\n */\nfunction inferParamsAbi(params) {\n  const abi = [];\n  params.forEach(param => {\n    if (Array.isArray(param)) {\n      const inferredParams = inferParamsAbi(param);\n      abi.push({\n        type: 'tuple',\n        components: inferredParams,\n        name: ''\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      });\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      abi.push({\n        type: (0, _web3Utils.toHex)(param, true)\n      });\n    }\n  });\n  return abi;\n}\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\n * @param params - The actual parameters to encode.\n * @returns - The ABI encoded parameters\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"uint256\", \"string\"],\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nfunction encodeParameters(abi, params) {\n  if ((abi === null || abi === void 0 ? void 0 : abi.length) !== params.length) {\n    throw new _web3Errors.AbiError('Invalid number of values received for given ABI', {\n      expected: abi === null || abi === void 0 ? void 0 : abi.length,\n      received: params.length\n    });\n  }\n  const abiParams = (0, _utils.toAbiParams)(abi);\n  return _web3Validator.utils.uint8ArrayToHexString((0, _index.encodeTuple)({\n    type: 'tuple',\n    name: '',\n    components: abiParams\n  }, params).encoded);\n}\n/**\n * Infer a smart contract method parameter type and then encode this parameter.\n * @param params - The parameters to encode.\n * @returns - The ABI encoded parameters\n *\n * @remarks\n * This method is useful when you don't know the type of the parameters you want to encode. It will infer the type of the parameters and then encode them.\n * However, it is not recommended to use this method when you know the type of the parameters you want to encode. In this case, use the {@link encodeParameters} method instead.\n * The type inference is not perfect and can lead to unexpected results. Especially when you want to encode an array, uint that is not uint256 or bytes....\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nfunction inferTypesAndEncodeParameters(params) {\n  try {\n    const abiParams = inferParamsAbi(params);\n    return _web3Validator.utils.uint8ArrayToHexString((0, _index.encodeTuple)({\n      type: 'tuple',\n      name: '',\n      components: abiParams\n    }, params).encoded);\n  } catch (e) {\n    // throws If the inferred params type caused an error\n    throw new _web3Errors.AbiError('Could not infer types from given params', {\n      params\n    });\n  }\n}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":8,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":8,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":8,"column":15}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":8,"column":18}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":17,"column":0},"generated":{"line":8,"column":25}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":9,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":9,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":9,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":9,"column":17}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":19,"column":0},"generated":{"line":9,"column":24}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":10,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":10,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":10,"column":18}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":10,"column":21}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":20,"column":0},"generated":{"line":10,"column":28}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":11,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":11,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":11,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":11,"column":13}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":21,"column":0},"generated":{"line":11,"column":20}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":12,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":12,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":12,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":12,"column":13}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":22,"column":0},"generated":{"line":12,"column":20}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":13,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":24,"column":0},"generated":{"line":30,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":34,"column":0},"generated":{"line":40,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":34,"column":9},"generated":{"line":40,"column":9}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":34,"column":23},"generated":{"line":40,"column":23}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":34,"column":24},"generated":{"line":40,"column":24}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":34,"column":41},"generated":{"line":40,"column":30}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":34,"column":41},"generated":{"line":40,"column":32}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":35,"column":1},"generated":{"line":41,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":35,"column":7},"generated":{"line":41,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":35,"column":10},"generated":{"line":41,"column":11}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":35,"column":29},"generated":{"line":41,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":35,"column":31},"generated":{"line":41,"column":16}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":36,"column":1},"generated":{"line":42,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":36,"column":7},"generated":{"line":42,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":36,"column":8},"generated":{"line":42,"column":9}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":36,"column":15},"generated":{"line":42,"column":16}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":36,"column":16},"generated":{"line":42,"column":17}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":36,"column":21},"generated":{"line":42,"column":22}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":36,"column":24},"generated":{"line":42,"column":26}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":2},"generated":{"line":43,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":6},"generated":{"line":43,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":11},"generated":{"line":43,"column":13}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":12},"generated":{"line":43,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":19},"generated":{"line":43,"column":21}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":20},"generated":{"line":43,"column":22}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":25},"generated":{"line":43,"column":27}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":26},"generated":{"line":43,"column":28}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":37,"column":28},"generated":{"line":43,"column":30}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":38,"column":3},"generated":{"line":44,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":38,"column":9},"generated":{"line":44,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":38,"column":23},"generated":{"line":44,"column":26}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":38,"column":26},"generated":{"line":44,"column":29}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":38,"column":40},"generated":{"line":44,"column":43}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":38,"column":41},"generated":{"line":44,"column":44}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":38,"column":46},"generated":{"line":44,"column":49}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":38,"column":47},"generated":{"line":44,"column":50}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":39,"column":3},"generated":{"line":45,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":39,"column":6},"generated":{"line":45,"column":9}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":39,"column":7},"generated":{"line":45,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":39,"column":11},"generated":{"line":45,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":39,"column":12},"generated":{"line":45,"column":15}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":40,"column":4},"generated":{"line":46,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":40,"column":8},"generated":{"line":46,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":40,"column":10},"generated":{"line":46,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":40,"column":17},"generated":{"line":46,"column":21}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":41,"column":4},"generated":{"line":47,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":41,"column":14},"generated":{"line":47,"column":18}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":41,"column":16},"generated":{"line":47,"column":20}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":41,"column":30},"generated":{"line":47,"column":34}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":42,"column":4},"generated":{"line":48,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":42,"column":8},"generated":{"line":48,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":42,"column":10},"generated":{"line":48,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":43,"column":4},"generated":{"line":49,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":44,"column":20},"generated":{"line":50,"column":7}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":50,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":45,"column":3},"generated":{"line":51,"column":5}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":45,"column":9},"generated":{"line":51,"column":11}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":46,"column":3},"generated":{"line":52,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":3},"generated":{"line":53,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":6},"generated":{"line":53,"column":9}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":7},"generated":{"line":53,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":11},"generated":{"line":53,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":12},"generated":{"line":53,"column":15}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":14},"generated":{"line":54,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":18},"generated":{"line":54,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":20},"generated":{"line":54,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":20},"generated":{"line":54,"column":18}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":25},"generated":{"line":54,"column":34}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":26},"generated":{"line":54,"column":36}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":38},"generated":{"line":54,"column":41}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":40},"generated":{"line":54,"column":43}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":44},"generated":{"line":54,"column":47}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":45},"generated":{"line":55,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":63},"generated":{"line":55,"column":7}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":47,"column":64},"generated":{"line":55,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":49,"column":1},"generated":{"line":57,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":49,"column":2},"generated":{"line":57,"column":3}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":49,"column":3},"generated":{"line":57,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":50,"column":1},"generated":{"line":58,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":50,"column":8},"generated":{"line":58,"column":9}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":50,"column":11},"generated":{"line":58,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":59,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":53,"column":0},"generated":{"line":60,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":69,"column":6},"generated":{"line":76,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":69,"column":16},"generated":{"line":76,"column":9}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":69,"column":32},"generated":{"line":76,"column":25}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":69,"column":33},"generated":{"line":76,"column":26}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":69,"column":61},"generated":{"line":76,"column":29}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":69,"column":63},"generated":{"line":76,"column":31}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":69,"column":80},"generated":{"line":76,"column":37}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":69,"column":80},"generated":{"line":76,"column":39}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":1},"generated":{"line":77,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":5},"generated":{"line":77,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":5},"generated":{"line":77,"column":7}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":15}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":19}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":5},"generated":{"line":77,"column":23}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":26}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":31}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":36}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":37}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":40}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":45}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":46}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":5},"generated":{"line":77,"column":49}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":8},"generated":{"line":77,"column":52}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":10},"generated":{"line":77,"column":53}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":16},"generated":{"line":77,"column":59}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":21},"generated":{"line":77,"column":65}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":27},"generated":{"line":77,"column":71}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":28},"generated":{"line":77,"column":72}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":34},"generated":{"line":77,"column":78}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":70,"column":36},"generated":{"line":77,"column":80}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":71,"column":2},"generated":{"line":78,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":71,"column":8},"generated":{"line":78,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":71,"column":12},"generated":{"line":78,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":71,"column":20},"generated":{"line":78,"column":34}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":71,"column":21},"generated":{"line":78,"column":35}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":71,"column":70},"generated":{"line":78,"column":84}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":71,"column":72},"generated":{"line":78,"column":86}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":3},"generated":{"line":79,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":11},"generated":{"line":79,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":13},"generated":{"line":79,"column":16}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":19}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":24}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":28}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":13},"generated":{"line":79,"column":32}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":35}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":40}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":45}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":46}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":49}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":54}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":55}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":13},"generated":{"line":79,"column":58}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":16},"generated":{"line":79,"column":61}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":18},"generated":{"line":79,"column":62}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":72,"column":24},"generated":{"line":79,"column":68}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":73,"column":3},"generated":{"line":80,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":73,"column":11},"generated":{"line":80,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":73,"column":13},"generated":{"line":80,"column":16}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":73,"column":19},"generated":{"line":80,"column":22}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":73,"column":20},"generated":{"line":80,"column":23}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":74,"column":3},"generated":{"line":81,"column":5}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":74,"column":4},"generated":{"line":81,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":1},"generated":{"line":83,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":7},"generated":{"line":83,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":16},"generated":{"line":83,"column":17}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":19},"generated":{"line":83,"column":20}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":19},"generated":{"line":83,"column":24}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":30},"generated":{"line":83,"column":42}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":31},"generated":{"line":83,"column":44}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":34},"generated":{"line":83,"column":47}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":77,"column":35},"generated":{"line":83,"column":48}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":78,"column":1},"generated":{"line":84,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":78,"column":8},"generated":{"line":84,"column":9}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":78,"column":13},"generated":{"line":84,"column":29}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":78,"column":14},"generated":{"line":84,"column":30}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":78,"column":35},"generated":{"line":84,"column":51}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":2},"generated":{"line":84,"column":52}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":2},"generated":{"line":84,"column":56}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":13},"generated":{"line":84,"column":74}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":14},"generated":{"line":84,"column":76}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":16},"generated":{"line":85,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":20},"generated":{"line":85,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":22},"generated":{"line":85,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":29},"generated":{"line":85,"column":17}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":31},"generated":{"line":86,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":35},"generated":{"line":86,"column":8}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":37},"generated":{"line":86,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":39},"generated":{"line":86,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":41},"generated":{"line":87,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":51},"generated":{"line":87,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":53},"generated":{"line":87,"column":16}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":62},"generated":{"line":88,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":64},"generated":{"line":88,"column":3}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":66},"generated":{"line":88,"column":5}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":72},"generated":{"line":88,"column":11}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":73},"generated":{"line":88,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":74},"generated":{"line":88,"column":13}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":79,"column":81},"generated":{"line":88,"column":20}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":80,"column":2},"generated":{"line":88,"column":21}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":81,"column":0},"generated":{"line":89,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":83,"column":0},"generated":{"line":90,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":102,"column":6},"generated":{"line":109,"column":0}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":102,"column":16},"generated":{"line":109,"column":9}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":102,"column":45},"generated":{"line":109,"column":38}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":102,"column":46},"generated":{"line":109,"column":39}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":102,"column":63},"generated":{"line":109,"column":45}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":102,"column":63},"generated":{"line":109,"column":47}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":103,"column":1},"generated":{"line":110,"column":2}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":103,"column":5},"generated":{"line":110,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":104,"column":2},"generated":{"line":111,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":104,"column":8},"generated":{"line":111,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":104,"column":17},"generated":{"line":111,"column":19}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":104,"column":20},"generated":{"line":111,"column":22}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":104,"column":34},"generated":{"line":111,"column":36}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":104,"column":35},"generated":{"line":111,"column":37}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":104,"column":41},"generated":{"line":111,"column":43}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":104,"column":42},"generated":{"line":111,"column":44}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":105,"column":2},"generated":{"line":112,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":105,"column":9},"generated":{"line":112,"column":11}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":105,"column":14},"generated":{"line":112,"column":31}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":105,"column":15},"generated":{"line":112,"column":32}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":105,"column":36},"generated":{"line":112,"column":53}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":3},"generated":{"line":112,"column":54}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":3},"generated":{"line":112,"column":58}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":14},"generated":{"line":112,"column":76}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":15},"generated":{"line":112,"column":78}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":17},"generated":{"line":113,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":21},"generated":{"line":113,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":23},"generated":{"line":113,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":30},"generated":{"line":113,"column":19}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":32},"generated":{"line":114,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":36},"generated":{"line":114,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":38},"generated":{"line":114,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":40},"generated":{"line":114,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":42},"generated":{"line":115,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":52},"generated":{"line":115,"column":16}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":54},"generated":{"line":115,"column":18}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":63},"generated":{"line":116,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":65},"generated":{"line":116,"column":5}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":67},"generated":{"line":116,"column":7}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":73},"generated":{"line":116,"column":13}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":74},"generated":{"line":116,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":75},"generated":{"line":116,"column":15}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":106,"column":82},"generated":{"line":116,"column":22}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":107,"column":3},"generated":{"line":116,"column":23}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":108,"column":2},"generated":{"line":117,"column":3}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":108,"column":3},"generated":{"line":117,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":108,"column":10},"generated":{"line":117,"column":11}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":108,"column":11},"generated":{"line":117,"column":12}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":108,"column":13},"generated":{"line":117,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":109,"column":2},"generated":{"line":118,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":110,"column":2},"generated":{"line":119,"column":4}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":110,"column":8},"generated":{"line":119,"column":10}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":110,"column":12},"generated":{"line":119,"column":14}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":110,"column":20},"generated":{"line":119,"column":34}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":110,"column":21},"generated":{"line":119,"column":35}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":110,"column":62},"generated":{"line":119,"column":76}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":110,"column":64},"generated":{"line":119,"column":78}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":111,"column":3},"generated":{"line":120,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":112,"column":3},"generated":{"line":121,"column":5}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":112,"column":4},"generated":{"line":121,"column":6}},{"source":"../../../src/coders/encode.ts","name":null,"original":{"line":114,"column":0},"generated":{"line":123,"column":0}}],"sources":{"../../../src/coders/encode.ts":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { AbiInput, AbiParameter } from 'web3-types';\nimport { toHex } from 'web3-utils';\nimport { utils } from 'web3-validator';\nimport { encodeTuple } from './base/index.js';\nimport { toAbiParams } from './utils.js';\n\n/**\n * @param params - The params to infer the ABI from\n * @returns The inferred ABI\n * @example\n * ```\n * inferParamsAbi([1, -1, 'hello', '0x1234', ])\n * ```\n * > [{ type: 'int256' }, { type: 'uint256' }, { type: 'string' }, { type: 'bytes' }]\n * ```\n */\nfunction inferParamsAbi(params: unknown[]): ReadonlyArray<AbiParameter> {\n\tconst abi: AbiParameter[] = [];\n\tparams.forEach(param => {\n\t\tif (Array.isArray(param)) {\n\t\t\tconst inferredParams = inferParamsAbi(param);\n\t\t\tabi.push({\n\t\t\t\ttype: 'tuple',\n\t\t\t\tcomponents: inferredParams,\n\t\t\t\tname: '',\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t} as AbiParameter);\n\t\t} else {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\tabi.push({ type: toHex(param as any, true) } as AbiParameter);\n\t\t}\n\t});\n\treturn abi;\n}\n\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\n * @param params - The actual parameters to encode.\n * @returns - The ABI encoded parameters\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"uint256\", \"string\"],\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport function encodeParameters(abi: ReadonlyArray<AbiInput>, params: unknown[]): string {\n\tif (abi?.length !== params.length) {\n\t\tthrow new AbiError('Invalid number of values received for given ABI', {\n\t\t\texpected: abi?.length,\n\t\t\treceived: params.length,\n\t\t});\n\t}\n\n\tconst abiParams = toAbiParams(abi);\n\treturn utils.uint8ArrayToHexString(\n\t\tencodeTuple({ type: 'tuple', name: '', components: abiParams }, params).encoded,\n\t);\n}\n\n/**\n * Infer a smart contract method parameter type and then encode this parameter.\n * @param params - The parameters to encode.\n * @returns - The ABI encoded parameters\n *\n * @remarks\n * This method is useful when you don't know the type of the parameters you want to encode. It will infer the type of the parameters and then encode them.\n * However, it is not recommended to use this method when you know the type of the parameters you want to encode. In this case, use the {@link encodeParameters} method instead.\n * The type inference is not perfect and can lead to unexpected results. Especially when you want to encode an array, uint that is not uint256 or bytes....\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport function inferTypesAndEncodeParameters(params: unknown[]): string {\n\ttry {\n\t\tconst abiParams = inferParamsAbi(params);\n\t\treturn utils.uint8ArrayToHexString(\n\t\t\tencodeTuple({ type: 'tuple', name: '', components: abiParams }, params).encoded,\n\t\t);\n\t} catch (e) {\n\t\t// throws If the inferred params type caused an error\n\t\tthrow new AbiError('Could not infer types from given params', {\n\t\t\tparams,\n\t\t});\n\t}\n}\n"},"lineCount":null}},"error":null,"hash":"4ae85bc0f19599b5877d4821d4085e62","cacheData":{"env":{}}}
{"id":"node_modules/web3-types/lib/esm/eth_types.js","dependencies":[{"name":"G:\\Twitter Dapp\\node_modules\\web3-types\\lib\\esm\\eth_types.js.map","includedInParent":true,"mtime":1729344035510},{"name":"G:\\Twitter Dapp\\node_modules\\web3-types\\src\\eth_types.ts","includedInParent":true,"mtime":1729344038650},{"name":"G:\\Twitter Dapp\\package.json","includedInParent":true,"mtime":1729344052353},{"name":"G:\\Twitter Dapp\\node_modules\\web3-types\\lib\\esm\\package.json","includedInParent":true,"mtime":1729344035055}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.HardforksOrdered = exports.BlockTags = void 0;\nvar BlockTags;\n(function (BlockTags) {\n  BlockTags[\"EARLIEST\"] = \"earliest\";\n  BlockTags[\"LATEST\"] = \"latest\";\n  BlockTags[\"PENDING\"] = \"pending\";\n  BlockTags[\"SAFE\"] = \"safe\";\n  BlockTags[\"FINALIZED\"] = \"finalized\";\n  BlockTags[\"COMMITTED\"] = \"committed\";\n})(BlockTags || (exports.BlockTags = BlockTags = {}));\n// This list of hardforks is expected to be in order\n// keep this in mind when making changes to it\nvar HardforksOrdered;\n(function (HardforksOrdered) {\n  HardforksOrdered[\"chainstart\"] = \"chainstart\";\n  HardforksOrdered[\"frontier\"] = \"frontier\";\n  HardforksOrdered[\"homestead\"] = \"homestead\";\n  HardforksOrdered[\"dao\"] = \"dao\";\n  HardforksOrdered[\"tangerineWhistle\"] = \"tangerineWhistle\";\n  HardforksOrdered[\"spuriousDragon\"] = \"spuriousDragon\";\n  HardforksOrdered[\"byzantium\"] = \"byzantium\";\n  HardforksOrdered[\"constantinople\"] = \"constantinople\";\n  HardforksOrdered[\"petersburg\"] = \"petersburg\";\n  HardforksOrdered[\"istanbul\"] = \"istanbul\";\n  HardforksOrdered[\"muirGlacier\"] = \"muirGlacier\";\n  HardforksOrdered[\"berlin\"] = \"berlin\";\n  HardforksOrdered[\"london\"] = \"london\";\n  HardforksOrdered[\"altair\"] = \"altair\";\n  HardforksOrdered[\"arrowGlacier\"] = \"arrowGlacier\";\n  HardforksOrdered[\"grayGlacier\"] = \"grayGlacier\";\n  HardforksOrdered[\"bellatrix\"] = \"bellatrix\";\n  HardforksOrdered[\"merge\"] = \"merge\";\n  HardforksOrdered[\"capella\"] = \"capella\";\n  HardforksOrdered[\"shanghai\"] = \"shanghai\";\n})(HardforksOrdered || (exports.HardforksOrdered = HardforksOrdered = {}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":0},"generated":{"line":7,"column":0}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":12},"generated":{"line":7,"column":4}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":51,"column":1},"generated":{"line":7,"column":13}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":0},"generated":{"line":8,"column":0}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":0},"generated":{"line":8,"column":1}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":12},"generated":{"line":8,"column":11}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":8,"column":20}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":8,"column":22}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":45,"column":1},"generated":{"line":9,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":45,"column":1},"generated":{"line":9,"column":11}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":45,"column":1},"generated":{"line":9,"column":12}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":45,"column":1},"generated":{"line":9,"column":22}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":45,"column":1},"generated":{"line":9,"column":23}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":45,"column":1},"generated":{"line":9,"column":26}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":45,"column":22},"generated":{"line":9,"column":36}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":10,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":10,"column":11}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":10,"column":12}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":10,"column":20}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":10,"column":21}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":46,"column":1},"generated":{"line":10,"column":24}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":46,"column":18},"generated":{"line":10,"column":32}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":47,"column":1},"generated":{"line":11,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":47,"column":1},"generated":{"line":11,"column":11}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":47,"column":1},"generated":{"line":11,"column":12}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":47,"column":1},"generated":{"line":11,"column":21}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":47,"column":1},"generated":{"line":11,"column":22}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":47,"column":1},"generated":{"line":11,"column":25}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":47,"column":20},"generated":{"line":11,"column":34}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":12,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":12,"column":11}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":12,"column":12}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":12,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":12,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":48,"column":1},"generated":{"line":12,"column":22}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":48,"column":14},"generated":{"line":12,"column":28}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":49,"column":1},"generated":{"line":13,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":49,"column":1},"generated":{"line":13,"column":11}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":49,"column":1},"generated":{"line":13,"column":12}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":49,"column":1},"generated":{"line":13,"column":23}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":49,"column":1},"generated":{"line":13,"column":24}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":49,"column":1},"generated":{"line":13,"column":27}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":49,"column":24},"generated":{"line":13,"column":38}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":50,"column":1},"generated":{"line":14,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":50,"column":1},"generated":{"line":14,"column":11}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":50,"column":1},"generated":{"line":14,"column":12}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":50,"column":1},"generated":{"line":14,"column":23}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":50,"column":1},"generated":{"line":14,"column":24}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":50,"column":1},"generated":{"line":14,"column":27}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":50,"column":24},"generated":{"line":14,"column":38}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":51,"column":0},"generated":{"line":15,"column":0}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":51,"column":1},"generated":{"line":15,"column":1}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":12},"generated":{"line":15,"column":3}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":12}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":17}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":24}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":25}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":34}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":12},"generated":{"line":15,"column":37}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":46}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":49}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":50}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":51}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":52}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":44,"column":21},"generated":{"line":15,"column":53}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":294,"column":0},"generated":{"line":16,"column":0}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":295,"column":0},"generated":{"line":17,"column":0}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":0},"generated":{"line":18,"column":0}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":12},"generated":{"line":18,"column":4}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":317,"column":1},"generated":{"line":18,"column":20}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":0},"generated":{"line":19,"column":0}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":0},"generated":{"line":19,"column":1}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":12},"generated":{"line":19,"column":11}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":19,"column":27}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":19,"column":29}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":297,"column":1},"generated":{"line":20,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":297,"column":1},"generated":{"line":20,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":297,"column":1},"generated":{"line":20,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":297,"column":1},"generated":{"line":20,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":297,"column":1},"generated":{"line":20,"column":32}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":297,"column":1},"generated":{"line":20,"column":35}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":297,"column":26},"generated":{"line":20,"column":47}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":298,"column":1},"generated":{"line":21,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":298,"column":1},"generated":{"line":21,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":298,"column":1},"generated":{"line":21,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":298,"column":1},"generated":{"line":21,"column":29}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":298,"column":1},"generated":{"line":21,"column":30}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":298,"column":1},"generated":{"line":21,"column":33}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":298,"column":22},"generated":{"line":21,"column":43}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":299,"column":1},"generated":{"line":22,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":299,"column":1},"generated":{"line":22,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":299,"column":1},"generated":{"line":22,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":299,"column":1},"generated":{"line":22,"column":30}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":299,"column":1},"generated":{"line":22,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":299,"column":1},"generated":{"line":22,"column":34}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":299,"column":24},"generated":{"line":22,"column":45}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":300,"column":1},"generated":{"line":23,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":300,"column":1},"generated":{"line":23,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":300,"column":1},"generated":{"line":23,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":300,"column":1},"generated":{"line":23,"column":24}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":300,"column":1},"generated":{"line":23,"column":25}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":300,"column":1},"generated":{"line":23,"column":28}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":300,"column":12},"generated":{"line":23,"column":33}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":301,"column":1},"generated":{"line":24,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":301,"column":1},"generated":{"line":24,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":301,"column":1},"generated":{"line":24,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":301,"column":1},"generated":{"line":24,"column":37}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":301,"column":1},"generated":{"line":24,"column":38}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":301,"column":1},"generated":{"line":24,"column":41}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":301,"column":38},"generated":{"line":24,"column":59}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":302,"column":1},"generated":{"line":25,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":302,"column":1},"generated":{"line":25,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":302,"column":1},"generated":{"line":25,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":302,"column":1},"generated":{"line":25,"column":35}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":302,"column":1},"generated":{"line":25,"column":36}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":302,"column":1},"generated":{"line":25,"column":39}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":302,"column":34},"generated":{"line":25,"column":55}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":303,"column":1},"generated":{"line":26,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":303,"column":1},"generated":{"line":26,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":303,"column":1},"generated":{"line":26,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":303,"column":1},"generated":{"line":26,"column":30}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":303,"column":1},"generated":{"line":26,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":303,"column":1},"generated":{"line":26,"column":34}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":303,"column":24},"generated":{"line":26,"column":45}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":304,"column":1},"generated":{"line":27,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":304,"column":1},"generated":{"line":27,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":304,"column":1},"generated":{"line":27,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":304,"column":1},"generated":{"line":27,"column":35}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":304,"column":1},"generated":{"line":27,"column":36}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":304,"column":1},"generated":{"line":27,"column":39}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":304,"column":34},"generated":{"line":27,"column":55}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":305,"column":1},"generated":{"line":28,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":305,"column":1},"generated":{"line":28,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":305,"column":1},"generated":{"line":28,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":305,"column":1},"generated":{"line":28,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":305,"column":1},"generated":{"line":28,"column":32}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":305,"column":1},"generated":{"line":28,"column":35}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":305,"column":26},"generated":{"line":28,"column":47}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":306,"column":1},"generated":{"line":29,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":306,"column":1},"generated":{"line":29,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":306,"column":1},"generated":{"line":29,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":306,"column":1},"generated":{"line":29,"column":29}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":306,"column":1},"generated":{"line":29,"column":30}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":306,"column":1},"generated":{"line":29,"column":33}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":306,"column":22},"generated":{"line":29,"column":43}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":307,"column":1},"generated":{"line":30,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":307,"column":1},"generated":{"line":30,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":307,"column":1},"generated":{"line":30,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":307,"column":1},"generated":{"line":30,"column":32}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":307,"column":1},"generated":{"line":30,"column":33}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":307,"column":1},"generated":{"line":30,"column":36}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":307,"column":28},"generated":{"line":30,"column":49}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":308,"column":1},"generated":{"line":31,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":308,"column":1},"generated":{"line":31,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":308,"column":1},"generated":{"line":31,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":308,"column":1},"generated":{"line":31,"column":27}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":308,"column":1},"generated":{"line":31,"column":28}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":308,"column":1},"generated":{"line":31,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":308,"column":18},"generated":{"line":31,"column":39}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":309,"column":1},"generated":{"line":32,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":309,"column":1},"generated":{"line":32,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":309,"column":1},"generated":{"line":32,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":309,"column":1},"generated":{"line":32,"column":27}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":309,"column":1},"generated":{"line":32,"column":28}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":309,"column":1},"generated":{"line":32,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":309,"column":18},"generated":{"line":32,"column":39}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":310,"column":1},"generated":{"line":33,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":310,"column":1},"generated":{"line":33,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":310,"column":1},"generated":{"line":33,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":310,"column":1},"generated":{"line":33,"column":27}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":310,"column":1},"generated":{"line":33,"column":28}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":310,"column":1},"generated":{"line":33,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":310,"column":18},"generated":{"line":33,"column":39}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":311,"column":1},"generated":{"line":34,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":311,"column":1},"generated":{"line":34,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":311,"column":1},"generated":{"line":34,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":311,"column":1},"generated":{"line":34,"column":33}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":311,"column":1},"generated":{"line":34,"column":34}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":311,"column":1},"generated":{"line":34,"column":37}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":311,"column":30},"generated":{"line":34,"column":51}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":312,"column":1},"generated":{"line":35,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":312,"column":1},"generated":{"line":35,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":312,"column":1},"generated":{"line":35,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":312,"column":1},"generated":{"line":35,"column":32}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":312,"column":1},"generated":{"line":35,"column":33}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":312,"column":1},"generated":{"line":35,"column":36}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":312,"column":28},"generated":{"line":35,"column":49}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":313,"column":1},"generated":{"line":36,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":313,"column":1},"generated":{"line":36,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":313,"column":1},"generated":{"line":36,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":313,"column":1},"generated":{"line":36,"column":30}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":313,"column":1},"generated":{"line":36,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":313,"column":1},"generated":{"line":36,"column":34}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":313,"column":24},"generated":{"line":36,"column":45}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":314,"column":1},"generated":{"line":37,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":314,"column":1},"generated":{"line":37,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":314,"column":1},"generated":{"line":37,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":314,"column":1},"generated":{"line":37,"column":26}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":314,"column":1},"generated":{"line":37,"column":27}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":314,"column":1},"generated":{"line":37,"column":30}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":314,"column":16},"generated":{"line":37,"column":37}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":315,"column":1},"generated":{"line":38,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":315,"column":1},"generated":{"line":38,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":315,"column":1},"generated":{"line":38,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":315,"column":1},"generated":{"line":38,"column":28}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":315,"column":1},"generated":{"line":38,"column":29}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":315,"column":1},"generated":{"line":38,"column":32}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":315,"column":20},"generated":{"line":38,"column":41}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":316,"column":1},"generated":{"line":39,"column":2}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":316,"column":1},"generated":{"line":39,"column":18}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":316,"column":1},"generated":{"line":39,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":316,"column":1},"generated":{"line":39,"column":29}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":316,"column":1},"generated":{"line":39,"column":30}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":316,"column":1},"generated":{"line":39,"column":33}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":316,"column":22},"generated":{"line":39,"column":43}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":317,"column":0},"generated":{"line":40,"column":0}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":317,"column":1},"generated":{"line":40,"column":1}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":12},"generated":{"line":40,"column":3}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":19}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":24}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":31}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":32}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":48}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":12},"generated":{"line":40,"column":51}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":67}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":70}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":71}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":72}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":73}},{"source":"../../src/eth_types.ts","name":null,"original":{"line":296,"column":28},"generated":{"line":40,"column":74}}],"sources":{"../../src/eth_types.ts":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, HexString, Numbers } from './primitives_types.js';\n\nexport type ValueTypes = 'address' | 'bool' | 'string' | 'int256' | 'uint256' | 'bytes' | 'bigint';\n// Hex encoded 32 bytes\nexport type HexString32Bytes = HexString;\n// Hex encoded 16 bytes\nexport type HexString16Bytes = HexString;\n// Hex encoded 8 bytes\nexport type HexString8Bytes = HexString;\n// Hex encoded 1 byte\nexport type HexStringSingleByte = HexString;\n// Hex encoded 1 byte\nexport type HexStringBytes = HexString;\n// Hex encoded 256 byte\nexport type HexString256Bytes = HexString;\n// Hex encoded unsigned integer\nexport type Uint = HexString;\n// Hex encoded unsigned integer 32 bytes\nexport type Uint256 = HexString;\n// Hex encoded address\nexport type Address = HexString;\n\n// https://github.com/ethereum/execution-apis/blob/main/src/schemas/filter.json#L59\nexport type Topic = HexString32Bytes;\n\nexport type TransactionHash = HexString;\nexport type Uncles = HexString32Bytes[];\nexport enum BlockTags {\n\tEARLIEST = 'earliest',\n\tLATEST = 'latest',\n\tPENDING = 'pending',\n\tSAFE = 'safe',\n\tFINALIZED = 'finalized',\n\tCOMMITTED = 'committed',\n}\nexport type BlockTag = `${BlockTags}`;\n\nexport type BlockNumberOrTag = Numbers | BlockTag;\n\nexport interface Proof {\n\treadonly address: HexString;\n\treadonly nonce: string;\n\treadonly balance: string;\n}\n\nexport interface TransactionInput {\n\treadonly [key: string]: unknown;\n\treadonly to?: HexString; // If its a contract creation tx then no address wil be specified.\n\treadonly from?: HexString;\n\treadonly data?: string;\n\treadonly input?: string;\n\treadonly gas: HexString;\n\treadonly gasLimit?: string;\n\treadonly gasPrice?: string;\n\treadonly maxPriorityFeePerGas?: string;\n\treadonly maxFeePerGas?: string;\n\treadonly nonce: string;\n\treadonly value: string;\n\treadonly blockNumber?: HexString;\n\treadonly transactionIndex?: HexString;\n\treadonly type?: HexString;\n\treadonly chainId?: HexString;\n}\n\nexport type TransactionOutput = {\n\treadonly [key: string]: unknown;\n\treadonly to?: HexString; // If its a contract creation tx then no address wil be specified.\n\treadonly from?: HexString;\n\treadonly input: string;\n\treadonly gas?: Numbers;\n\treadonly gasLimit?: string;\n\treadonly nonce: Numbers;\n\treadonly value: Numbers;\n\treadonly blockNumber?: Numbers;\n\treadonly transactionIndex?: Numbers;\n} & (\n\t| { maxPriorityFeePerGas: Numbers; maxFeePerGas: Numbers; gasPrice?: never }\n\t| { maxPriorityFeePerGas?: never; maxFeePerGas?: never; gasPrice: Numbers }\n);\n\nexport interface LogsInput {\n\treadonly blockHash?: HexString;\n\treadonly transactionHash?: HexString;\n\treadonly logIndex?: HexString;\n\treadonly id?: string;\n\treadonly blockNumber?: HexString;\n\treadonly transactionIndex?: HexString;\n\treadonly address: HexString;\n\treadonly topics: HexString[];\n\treadonly data: HexString;\n}\nexport interface LogsOutput {\n\treadonly id?: string;\n\treadonly removed: boolean;\n\treadonly logIndex?: Numbers;\n\treadonly transactionIndex?: Numbers;\n\treadonly transactionHash?: HexString32Bytes;\n\treadonly blockHash?: HexString32Bytes;\n\treadonly blockNumber?: Numbers;\n\treadonly address: string;\n\treadonly topics: HexString[];\n\treadonly data: HexString;\n}\n\nexport interface BlockInput {\n\treadonly gasLimit: HexString;\n\treadonly gasUsed: HexString;\n\treadonly size: HexString;\n\treadonly timestamp: HexString;\n\treadonly number?: HexString;\n\treadonly difficulty?: HexString;\n\treadonly totalDifficulty?: HexString;\n\treadonly transactions?: TransactionInput[];\n\treadonly miner?: HexString;\n\treadonly baseFeePerGas?: HexString;\n}\n\nexport interface Withdrawals {\n\treadonly index: Numbers;\n\treadonly validatorIndex: Numbers;\n\treadonly address: Address;\n\treadonly amount: Numbers;\n}\n\nexport interface BlockOutput {\n\treadonly gasLimit: bigint | number;\n\treadonly gasUsed: bigint | number;\n\treadonly size: bigint | number;\n\treadonly timestamp: bigint | number;\n\treadonly number?: bigint | number;\n\treadonly difficulty?: bigint | number;\n\treadonly totalDifficulty?: bigint | number;\n\treadonly transactions?: TransactionOutput[];\n\treadonly miner?: HexString;\n\treadonly baseFeePerGas?: bigint | number;\n\treadonly parentHash?: HexString32Bytes;\n\n\t// Added properties\n\treadonly blobGasUsed?: bigint | number;\n\treadonly excessBlobGas?: bigint | number;\n\treadonly extraData?: Bytes;\n\treadonly hash?: HexString32Bytes;\n\treadonly logsBloom?: Bytes;\n\treadonly nonce?: bigint | number;\n\treadonly parentBeaconBlockRoot?: HexString32Bytes;\n\treadonly receiptsRoot?: HexString32Bytes;\n\treadonly sha3Uncles: HexString32Bytes[];\n\treadonly stateRoot?: HexString32Bytes;\n\treadonly transactionsRoot?: HexString32Bytes;\n\treadonly withdrawalsRoot?: HexString32Bytes;\n\treadonly mixHash?: HexString32Bytes;\n\treadonly uncles?: Uncles;\n\treadonly withdrawals?: Withdrawals[];\n}\n\nexport interface BlockHeaderOutput {\n\treadonly baseFeePerGas?: Numbers;\n\treadonly blobGasUsed?: Numbers;\n\treadonly difficulty?: Numbers;\n\treadonly excessBlobGas?: Numbers;\n\treadonly extraData?: Bytes;\n\treadonly gasLimit: Numbers;\n\treadonly gasUsed: Numbers;\n\treadonly hash?: HexString32Bytes;\n\treadonly logsBloom?: Bytes;\n\treadonly miner?: HexString;\n\treadonly nonce?: Numbers;\n\treadonly number?: Numbers;\n\treadonly parentBeaconBlockRoot?: HexString32Bytes;\n\treadonly parentHash?: HexString32Bytes;\n\treadonly receiptsRoot?: HexString32Bytes;\n\treadonly sha3Uncles: HexString32Bytes[];\n\treadonly stateRoot?: HexString32Bytes;\n\treadonly timestamp: Numbers;\n\treadonly transactionsRoot?: HexString32Bytes;\n\treadonly withdrawalsRoot?: HexString32Bytes;\n\n\t// These fields are returned when the RPC client is Nethermind,\n\t// but aren't available in other clients such as Geth\n\treadonly author?: Address;\n\treadonly totalDifficulty?: Numbers;\n\treadonly size?: Numbers;\n\treadonly excessDataGas?: Numbers;\n\treadonly mixHash?: HexString32Bytes;\n\treadonly transactions?: TransactionOutput[];\n\treadonly uncles?: Uncles;\n\treadonly withdrawals?: Withdrawals[];\n}\n\nexport interface ReceiptInput {\n\treadonly [x: string]: unknown;\n\treadonly blockNumber?: HexString;\n\treadonly transactionIndex?: HexString;\n\treadonly cumulativeGasUsed: HexString;\n\treadonly gasUsed: HexString;\n\treadonly logs?: LogsInput[];\n\treadonly contractAddress?: HexString;\n\treadonly status?: string;\n\treadonly effectiveGasPrice?: HexString;\n}\n\nexport interface ReceiptOutput {\n\treadonly blockNumber?: bigint | number;\n\treadonly transactionIndex?: bigint | number;\n\treadonly cumulativeGasUsed: bigint | number;\n\treadonly gasUsed: bigint | number;\n\treadonly logs?: LogsOutput[];\n\treadonly contractAddress?: HexString;\n\treadonly status: boolean;\n\treadonly effectiveGasPrice?: bigint | number;\n}\n\nexport interface PostInput {\n\treadonly ttl?: HexString;\n\treadonly workToProve?: HexString;\n\treadonly priority?: HexString;\n\treadonly expiry?: HexString;\n\treadonly sent?: HexString;\n\treadonly workProved?: HexString;\n\treadonly topics?: HexString[];\n}\n\nexport interface PostOutput {\n\treadonly ttl?: bigint | number;\n\treadonly workToProve?: bigint | number;\n\treadonly priority?: bigint | number;\n\treadonly expiry?: bigint | number;\n\treadonly sent?: bigint | number;\n\treadonly workProved?: bigint | number;\n\treadonly topics?: string[];\n}\n\nexport interface SyncInput {\n\treadonly startingBlock: HexString;\n\treadonly currentBlock: HexString;\n\treadonly highestBlock: HexString;\n\treadonly knownStates?: HexString;\n\treadonly pulledStates?: HexString;\n}\n\nexport interface SyncOutput {\n\treadonly startingBlock: Numbers;\n\treadonly currentBlock: Numbers;\n\treadonly highestBlock: Numbers;\n\treadonly knownStates?: Numbers;\n\treadonly pulledStates?: Numbers;\n}\n\nexport type Receipt = Record<string, unknown>;\n\ntype FilterOption = Record<string, Numbers | Numbers[] | boolean | boolean[]>;\n\n// https://github.com/ethereum/execution-apis/blob/main/src/schemas/filter.json#L28\nexport interface Filter {\n\treadonly fromBlock?: BlockNumberOrTag;\n\treadonly toBlock?: BlockNumberOrTag;\n\treadonly address?: Address | Address[];\n\treadonly blockHash?: Address;\n\t// Using \"null\" type intentionally to match specifications\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\treadonly topics?: (null | Topic | Topic[])[];\n\treadonly filter?: FilterOption;\n}\n\nexport interface AccessListEntry {\n\treadonly address?: Address;\n\treadonly storageKeys?: HexString32Bytes[];\n}\nexport type AccessList = AccessListEntry[];\n\nexport type AccessListResult = {\n\treadonly accessList?: AccessList;\n\treadonly gasUsed?: Numbers;\n};\n\nexport type ValidChains = 'goerli' | 'kovan' | 'mainnet' | 'rinkeby' | 'ropsten' | 'sepolia';\n\n// This list of hardforks is expected to be in order\n// keep this in mind when making changes to it\nexport enum HardforksOrdered {\n\tchainstart = 'chainstart',\n\tfrontier = 'frontier',\n\thomestead = 'homestead',\n\tdao = 'dao',\n\ttangerineWhistle = 'tangerineWhistle',\n\tspuriousDragon = 'spuriousDragon',\n\tbyzantium = 'byzantium',\n\tconstantinople = 'constantinople',\n\tpetersburg = 'petersburg',\n\tistanbul = 'istanbul',\n\tmuirGlacier = 'muirGlacier',\n\tberlin = 'berlin',\n\tlondon = 'london',\n\taltair = 'altair',\n\tarrowGlacier = 'arrowGlacier',\n\tgrayGlacier = 'grayGlacier',\n\tbellatrix = 'bellatrix',\n\tmerge = 'merge',\n\tcapella = 'capella',\n\tshanghai = 'shanghai',\n}\n\nexport type Hardfork = `${HardforksOrdered}`;\n\nexport interface LogBase<NumberType, ByteType> {\n\treadonly removed?: boolean;\n\treadonly logIndex?: NumberType;\n\treadonly transactionIndex?: NumberType;\n\treadonly transactionHash?: ByteType;\n\treadonly blockHash?: ByteType;\n\treadonly blockNumber?: NumberType;\n\treadonly address?: Address;\n\treadonly data?: ByteType;\n\treadonly topics?: ByteType[];\n\treadonly id?: string;\n}\nexport interface Log extends LogBase<Numbers, Bytes> {\n\treadonly id?: string;\n}\n\nexport interface EventLog {\n\treadonly event: string;\n\treadonly id?: string;\n\treadonly logIndex?: bigint | number | string;\n\treadonly transactionIndex?: bigint | number | string;\n\treadonly transactionHash?: HexString32Bytes;\n\treadonly blockHash?: HexString32Bytes;\n\treadonly blockNumber?: bigint | number | string;\n\treadonly address: string;\n\treadonly topics: HexString[];\n\treadonly data: HexString;\n\treadonly raw?: { data: string; topics: unknown[] };\n\treadonly returnValues: Record<string, unknown>;\n\treadonly signature?: HexString;\n}\n\nexport interface TransactionReceiptBase<numberType, hashByteType, logsBloomByteType, logsType> {\n\treadonly transactionHash: hashByteType;\n\treadonly transactionIndex: numberType;\n\treadonly blockHash: hashByteType;\n\treadonly blockNumber: numberType;\n\treadonly from: Address;\n\treadonly to: Address;\n\treadonly cumulativeGasUsed: numberType;\n\treadonly gasUsed: numberType;\n\treadonly effectiveGasPrice?: numberType;\n\treadonly contractAddress?: Address;\n\treadonly logs: logsType[];\n\treadonly logsBloom: logsBloomByteType;\n\treadonly root: hashByteType;\n\treadonly status: numberType;\n\treadonly type?: numberType;\n\tevents?: { [key: string]: EventLog };\n}\n\nexport type TransactionReceipt = TransactionReceiptBase<Numbers, Bytes, Bytes, Log>;\n\nexport interface CustomChain {\n\tname?: string;\n\tnetworkId: Numbers;\n\tchainId: Numbers;\n}\n\nexport interface Common {\n\tcustomChain: CustomChain;\n\tbaseChain?: ValidChains;\n\thardfork?: Hardfork;\n}\n\ninterface TransactionBase {\n\tvalue?: Numbers;\n\taccessList?: AccessList;\n\tcommon?: Common;\n\tgas?: Numbers;\n\tgasPrice?: Numbers;\n\ttype?: Numbers;\n\tmaxFeePerGas?: Numbers;\n\tmaxPriorityFeePerGas?: Numbers;\n\tdata?: Bytes;\n\tinput?: Bytes;\n\tnonce?: Numbers;\n\tchain?: ValidChains;\n\thardfork?: Hardfork;\n\tchainId?: Numbers;\n\tnetworkId?: Numbers;\n\tgasLimit?: Numbers;\n\tyParity?: Uint;\n\tv?: Numbers;\n\tr?: Bytes;\n\ts?: Bytes;\n}\n\nexport interface Transaction extends TransactionBase {\n\tfrom?: Address;\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tto?: Address | null;\n}\n\nexport interface TransactionForAccessList extends Transaction {\n\tfrom: Address;\n}\n\nexport interface TransactionCall extends Transaction {\n\tto: Address;\n}\n\nexport interface TransactionWithFromLocalWalletIndex extends Omit<Transaction, 'from'> {\n\tfrom: Numbers;\n}\n\nexport interface TransactionWithToLocalWalletIndex extends Omit<Transaction, 'to'> {\n\tto: Numbers;\n}\n\nexport interface TransactionWithFromAndToLocalWalletIndex extends Omit<Transaction, 'from' | 'to'> {\n\tfrom: Numbers;\n\tto: Numbers;\n}\n\nexport interface TransactionInfo extends Transaction {\n\treadonly blockHash?: Bytes;\n\treadonly blockNumber?: Numbers;\n\treadonly from: Address;\n\treadonly hash: Bytes;\n\treadonly transactionIndex?: Numbers;\n}\n\nexport interface PopulatedUnsignedBaseTransaction {\n\tfrom: Address;\n\tto?: Address;\n\tvalue: Numbers;\n\tgas?: Numbers;\n\tgasPrice: Numbers;\n\ttype: Numbers;\n\tinput?: Bytes;\n\tdata?: Bytes;\n\tnonce: Numbers;\n\tnetworkId: Numbers;\n\tchain: ValidChains;\n\thardfork: Hardfork;\n\tchainId: Numbers;\n\tcommon: Common;\n\tgasLimit: Numbers;\n}\n\nexport interface PopulatedUnsignedEip2930Transaction extends PopulatedUnsignedBaseTransaction {\n\taccessList: AccessList;\n}\n\nexport interface PopulatedUnsignedEip1559Transaction extends PopulatedUnsignedEip2930Transaction {\n\tgasPrice: never;\n\tmaxFeePerGas: Numbers;\n\tmaxPriorityFeePerGas: Numbers;\n}\nexport type PopulatedUnsignedTransaction =\n\t| PopulatedUnsignedBaseTransaction\n\t| PopulatedUnsignedEip2930Transaction\n\t| PopulatedUnsignedEip1559Transaction;\n\nexport interface BlockBase<\n\tByteType,\n\tHexStringType,\n\tNumberType,\n\textraDataType,\n\tTransactionTypes,\n\tlogsBloomType,\n> {\n\treadonly parentHash: ByteType;\n\treadonly sha3Uncles: ByteType;\n\treadonly miner: HexStringType;\n\treadonly stateRoot: ByteType;\n\treadonly transactionsRoot: ByteType;\n\treadonly receiptsRoot: ByteType;\n\treadonly logsBloom?: logsBloomType;\n\treadonly difficulty?: NumberType;\n\treadonly number: NumberType;\n\treadonly gasLimit: NumberType;\n\treadonly gasUsed: NumberType;\n\treadonly timestamp: NumberType;\n\treadonly extraData: extraDataType;\n\treadonly mixHash: ByteType;\n\treadonly nonce: NumberType;\n\treadonly totalDifficulty: NumberType;\n\treadonly baseFeePerGas?: NumberType;\n\treadonly size: NumberType;\n\treadonly transactions: TransactionTypes;\n\treadonly uncles: Uncles;\n\treadonly hash?: ByteType;\n}\n\nexport type Block = BlockBase<\n\tBytes,\n\tBytes,\n\tNumbers,\n\tBytes,\n\tTransactionHash[] | TransactionInfo[],\n\tBytes\n>;\n\nexport interface FeeHistoryBase<NumberType> {\n\treadonly oldestBlock: NumberType;\n\treadonly baseFeePerGas: NumberType;\n\treadonly reward: NumberType[][];\n\treadonly gasUsedRatio: NumberType[];\n}\n\nexport type FeeHistory = FeeHistoryBase<Numbers>;\n\nexport interface StorageProof {\n\treadonly key: Bytes;\n\treadonly value: Numbers;\n\treadonly proof: Bytes[];\n}\n\nexport interface AccountObject {\n\treadonly balance: Numbers;\n\treadonly codeHash: Bytes;\n\treadonly nonce: Numbers;\n\treadonly storageHash: Bytes;\n\treadonly accountProof: Bytes[];\n\treadonly storageProof: StorageProof[];\n}\n\nexport interface Eip712TypeDetails {\n\tname: string;\n\ttype: string;\n}\nexport interface Eip712TypedData {\n\treadonly types: {\n\t\tEIP712Domain: Eip712TypeDetails[];\n\t\t[key: string]: Eip712TypeDetails[];\n\t};\n\treadonly primaryType: string;\n\treadonly domain: Record<string, string | number>;\n\treadonly message: Record<string, unknown>;\n}\n\n/**\n * To contain the gas Fee Data to be used with EIP-1559 transactions.\n * EIP-1559 was applied to Ethereum after London hardfork.\n *\n * Typically you will only need `maxFeePerGas` and `maxPriorityFeePerGas` for a transaction following EIP-1559.\n * However, if you want to get informed about the fees of last block, you can use `baseFeePerGas` too.\n *\n *\n * \t@see https://eips.ethereum.org/EIPS/eip-1559\n *\n */\nexport interface FeeData {\n\t/**\n\t * This filed is used for legacy networks that does not support EIP-1559.\n\t */\n\treadonly gasPrice?: Numbers;\n\n\t/**\n\t * The baseFeePerGas returned from the last available block.\n\t *\n\t * If EIP-1559 is not supported, this will be `undefined`\n\t *\n\t * However, the user will only pay (the future baseFeePerGas + the maxPriorityFeePerGas).\n\t * And this value is just for getting informed about the fees of last block.\n\t */\n\treadonly baseFeePerGas?: Numbers;\n\n\t/**\n\t * The maximum fee that the user would be willing to pay per-gas.\n\t *\n\t * However, the user will only pay (the future baseFeePerGas + the maxPriorityFeePerGas).\n\t * And the `maxFeePerGas` could be used to prevent paying more than it, if `baseFeePerGas` went too high.\n\t *\n\t * If EIP-1559 is not supported, this will be `undefined`\n\t */\n\treadonly maxFeePerGas?: Numbers;\n\n\t/**\n\t * The validator's tip for including a transaction in a block.\n\t *\n\t * If EIP-1559 is not supported, this will be `undefined`\n\t */\n\treadonly maxPriorityFeePerGas?: Numbers;\n}\n"},"lineCount":null}},"error":null,"hash":"9c2cf7f0cef915ef4bba74bbf3dd234a","cacheData":{"env":{}}}
{"id":"node_modules/ethereum-cryptography/aes.js","dependencies":[{"name":"G:\\Twitter Dapp\\package.json","includedInParent":true,"mtime":1729344052353},{"name":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\package.json","includedInParent":true,"mtime":1729344034533},{"name":"@noble/hashes/crypto","loc":{"line":5,"column":25,"index":156},"parent":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\aes.js","resolved":"G:\\Twitter Dapp\\node_modules\\@noble\\hashes\\crypto.js"},{"name":"./utils.js","loc":{"line":6,"column":27,"index":208},"parent":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\aes.js","resolved":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst utils_js_1 = require(\"./utils.js\");\nconst crypto = { web: crypto_1.crypto };\nfunction validateOpt(key, iv, mode) {\n    if (!mode.startsWith(\"aes-\")) {\n        throw new Error(`AES submodule doesn't support mode ${mode}`);\n    }\n    if (iv.length !== 16) {\n        throw new Error(\"AES: wrong IV length\");\n    }\n    if ((mode.startsWith(\"aes-128\") && key.length !== 16) ||\n        (mode.startsWith(\"aes-256\") && key.length !== 32)) {\n        throw new Error(\"AES: wrong key length\");\n    }\n}\nasync function getBrowserKey(mode, key, iv) {\n    if (!crypto.web) {\n        throw new Error(\"Browser crypto not available.\");\n    }\n    let keyMode;\n    if ([\"aes-128-cbc\", \"aes-256-cbc\"].includes(mode)) {\n        keyMode = \"cbc\";\n    }\n    if ([\"aes-128-ctr\", \"aes-256-ctr\"].includes(mode)) {\n        keyMode = \"ctr\";\n    }\n    if (!keyMode) {\n        throw new Error(\"AES: unsupported mode\");\n    }\n    const wKey = await crypto.web.subtle.importKey(\"raw\", key, { name: `AES-${keyMode.toUpperCase()}`, length: key.length * 8 }, true, [\"encrypt\", \"decrypt\"]);\n    // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit\n    // recommended by NIST SP800-38A\n    return [wKey, { name: `aes-${keyMode}`, iv, counter: iv, length: 128 }];\n}\nasync function encrypt(msg, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);\n        // Remove PKCS7 padding on cbc mode by stripping end of message\n        let res = new Uint8Array(cipher);\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\" && !(msg.length % 16)) {\n            res = res.slice(0, -16);\n        }\n        return res;\n    }\n    else if (crypto.node) {\n        const cipher = crypto.node.createCipheriv(mode, key, iv);\n        cipher.setAutoPadding(pkcs7PaddingEnabled);\n        return (0, utils_js_1.concatBytes)(cipher.update(msg), cipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\nasync function getPadding(cypherText, key, iv, mode) {\n    const lastBlock = cypherText.slice(-16);\n    for (let i = 0; i < 16; i++) {\n        // Undo xor of iv and fill with lastBlock ^ padding (16)\n        lastBlock[i] ^= iv[i] ^ 16;\n    }\n    const res = await encrypt(lastBlock, key, iv, mode);\n    return res.slice(0, 16);\n}\nasync function decrypt(cypherText, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        // Add empty padding so Chrome will correctly decrypt message\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\") {\n            const padding = await getPadding(cypherText, key, iv, mode);\n            cypherText = (0, utils_js_1.concatBytes)(cypherText, padding);\n        }\n        const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);\n        const msgBytes = new Uint8Array(msg);\n        // Safari always ignores padding (if no padding -> broken message)\n        if (wOpt.name === \"aes-cbc\") {\n            const encrypted = await encrypt(msgBytes, key, iv, mode);\n            if (!(0, utils_js_1.equalsBytes)(encrypted, cypherText)) {\n                throw new Error(\"AES: wrong padding\");\n            }\n        }\n        return msgBytes;\n    }\n    else if (crypto.node) {\n        const decipher = crypto.node.createDecipheriv(mode, key, iv);\n        decipher.setAutoPadding(pkcs7PaddingEnabled);\n        return (0, utils_js_1.concatBytes)(decipher.update(cypherText), decipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/ethereum-cryptography/aes.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}}],"sources":{"node_modules/ethereum-cryptography/aes.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.encrypt = encrypt;\nexports.decrypt = decrypt;\nconst crypto_1 = require(\"@noble/hashes/crypto\");\nconst utils_js_1 = require(\"./utils.js\");\nconst crypto = { web: crypto_1.crypto };\nfunction validateOpt(key, iv, mode) {\n    if (!mode.startsWith(\"aes-\")) {\n        throw new Error(`AES submodule doesn't support mode ${mode}`);\n    }\n    if (iv.length !== 16) {\n        throw new Error(\"AES: wrong IV length\");\n    }\n    if ((mode.startsWith(\"aes-128\") && key.length !== 16) ||\n        (mode.startsWith(\"aes-256\") && key.length !== 32)) {\n        throw new Error(\"AES: wrong key length\");\n    }\n}\nasync function getBrowserKey(mode, key, iv) {\n    if (!crypto.web) {\n        throw new Error(\"Browser crypto not available.\");\n    }\n    let keyMode;\n    if ([\"aes-128-cbc\", \"aes-256-cbc\"].includes(mode)) {\n        keyMode = \"cbc\";\n    }\n    if ([\"aes-128-ctr\", \"aes-256-ctr\"].includes(mode)) {\n        keyMode = \"ctr\";\n    }\n    if (!keyMode) {\n        throw new Error(\"AES: unsupported mode\");\n    }\n    const wKey = await crypto.web.subtle.importKey(\"raw\", key, { name: `AES-${keyMode.toUpperCase()}`, length: key.length * 8 }, true, [\"encrypt\", \"decrypt\"]);\n    // node.js uses whole 128 bit as a counter, without nonce, instead of 64 bit\n    // recommended by NIST SP800-38A\n    return [wKey, { name: `aes-${keyMode}`, iv, counter: iv, length: 128 }];\n}\nasync function encrypt(msg, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        const cipher = await crypto.web.subtle.encrypt(wOpt, wKey, msg);\n        // Remove PKCS7 padding on cbc mode by stripping end of message\n        let res = new Uint8Array(cipher);\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\" && !(msg.length % 16)) {\n            res = res.slice(0, -16);\n        }\n        return res;\n    }\n    else if (crypto.node) {\n        const cipher = crypto.node.createCipheriv(mode, key, iv);\n        cipher.setAutoPadding(pkcs7PaddingEnabled);\n        return (0, utils_js_1.concatBytes)(cipher.update(msg), cipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\nasync function getPadding(cypherText, key, iv, mode) {\n    const lastBlock = cypherText.slice(-16);\n    for (let i = 0; i < 16; i++) {\n        // Undo xor of iv and fill with lastBlock ^ padding (16)\n        lastBlock[i] ^= iv[i] ^ 16;\n    }\n    const res = await encrypt(lastBlock, key, iv, mode);\n    return res.slice(0, 16);\n}\nasync function decrypt(cypherText, key, iv, mode = \"aes-128-ctr\", pkcs7PaddingEnabled = true) {\n    validateOpt(key, iv, mode);\n    if (crypto.web) {\n        const [wKey, wOpt] = await getBrowserKey(mode, key, iv);\n        // Add empty padding so Chrome will correctly decrypt message\n        if (!pkcs7PaddingEnabled && wOpt.name === \"aes-cbc\") {\n            const padding = await getPadding(cypherText, key, iv, mode);\n            cypherText = (0, utils_js_1.concatBytes)(cypherText, padding);\n        }\n        const msg = await crypto.web.subtle.decrypt(wOpt, wKey, cypherText);\n        const msgBytes = new Uint8Array(msg);\n        // Safari always ignores padding (if no padding -> broken message)\n        if (wOpt.name === \"aes-cbc\") {\n            const encrypted = await encrypt(msgBytes, key, iv, mode);\n            if (!(0, utils_js_1.equalsBytes)(encrypted, cypherText)) {\n                throw new Error(\"AES: wrong padding\");\n            }\n        }\n        return msgBytes;\n    }\n    else if (crypto.node) {\n        const decipher = crypto.node.createDecipheriv(mode, key, iv);\n        decipher.setAutoPadding(pkcs7PaddingEnabled);\n        return (0, utils_js_1.concatBytes)(decipher.update(cypherText), decipher.final());\n    }\n    else {\n        throw new Error(\"The environment doesn't have AES module\");\n    }\n}\n"},"lineCount":98}},"error":null,"hash":"3aae06329d646381694d1d7520722307","cacheData":{"env":{}}}
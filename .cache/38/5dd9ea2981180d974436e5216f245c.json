{"id":"node_modules/ethereum-cryptography/pbkdf2.js","dependencies":[{"name":"G:\\Twitter Dapp\\package.json","includedInParent":true,"mtime":1729344052353},{"name":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\package.json","includedInParent":true,"mtime":1729344034533},{"name":"@noble/hashes/pbkdf2","loc":{"line":5,"column":25,"index":160},"parent":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\pbkdf2.js","resolved":"G:\\Twitter Dapp\\node_modules\\@noble\\hashes\\pbkdf2.js"},{"name":"@noble/hashes/sha256","loc":{"line":6,"column":25,"index":210},"parent":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\pbkdf2.js","resolved":"G:\\Twitter Dapp\\node_modules\\@noble\\hashes\\sha256.js"},{"name":"@noble/hashes/sha512","loc":{"line":7,"column":25,"index":260},"parent":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\pbkdf2.js","resolved":"G:\\Twitter Dapp\\node_modules\\@noble\\hashes\\sha512.js"},{"name":"./utils.js","loc":{"line":8,"column":27,"index":312},"parent":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\pbkdf2.js","resolved":"G:\\Twitter Dapp\\node_modules\\ethereum-cryptography\\utils.js"}],"generated":{"js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2 = pbkdf2;\nexports.pbkdf2Sync = pbkdf2Sync;\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst utils_js_1 = require(\"./utils.js\");\nasync function pbkdf2(password, salt, iterations, keylen, digest) {\n    if (![\"sha256\", \"sha512\"].includes(digest)) {\n        throw new Error(\"Only sha256 and sha512 are supported\");\n    }\n    (0, utils_js_1.assertBytes)(password);\n    (0, utils_js_1.assertBytes)(salt);\n    return (0, pbkdf2_1.pbkdf2Async)(digest === \"sha256\" ? sha256_1.sha256 : sha512_1.sha512, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\nfunction pbkdf2Sync(password, salt, iterations, keylen, digest) {\n    if (![\"sha256\", \"sha512\"].includes(digest)) {\n        throw new Error(\"Only sha256 and sha512 are supported\");\n    }\n    (0, utils_js_1.assertBytes)(password);\n    (0, utils_js_1.assertBytes)(salt);\n    return (0, pbkdf2_1.pbkdf2)(digest === \"sha256\" ? sha256_1.sha256 : sha512_1.sha512, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/ethereum-cryptography/pbkdf2.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}}],"sources":{"node_modules/ethereum-cryptography/pbkdf2.js":"\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.pbkdf2 = pbkdf2;\nexports.pbkdf2Sync = pbkdf2Sync;\nconst pbkdf2_1 = require(\"@noble/hashes/pbkdf2\");\nconst sha256_1 = require(\"@noble/hashes/sha256\");\nconst sha512_1 = require(\"@noble/hashes/sha512\");\nconst utils_js_1 = require(\"./utils.js\");\nasync function pbkdf2(password, salt, iterations, keylen, digest) {\n    if (![\"sha256\", \"sha512\"].includes(digest)) {\n        throw new Error(\"Only sha256 and sha512 are supported\");\n    }\n    (0, utils_js_1.assertBytes)(password);\n    (0, utils_js_1.assertBytes)(salt);\n    return (0, pbkdf2_1.pbkdf2Async)(digest === \"sha256\" ? sha256_1.sha256 : sha512_1.sha512, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\nfunction pbkdf2Sync(password, salt, iterations, keylen, digest) {\n    if (![\"sha256\", \"sha512\"].includes(digest)) {\n        throw new Error(\"Only sha256 and sha512 are supported\");\n    }\n    (0, utils_js_1.assertBytes)(password);\n    (0, utils_js_1.assertBytes)(salt);\n    return (0, pbkdf2_1.pbkdf2)(digest === \"sha256\" ? sha256_1.sha256 : sha512_1.sha512, password, salt, {\n        c: iterations,\n        dkLen: keylen\n    });\n}\n"},"lineCount":31}},"error":null,"hash":"feb46155d8f0b0b8f18f59d7c6325e00","cacheData":{"env":{}}}